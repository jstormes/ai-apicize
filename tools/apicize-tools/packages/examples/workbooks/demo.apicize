{
    "version": 1.0,
    "requests": [
        {
            "id": "08481c50-fc57-4099-9733-a102f1850c37",
            "name": "CRUD Operations",
            "children": [
                {
                    "id": "fc9b7f17-e86d-49de-9727-5c0113da0791",
                    "name": "Author #1",
                    "children": [
                        {
                            "id": "1facbeeb-b69c-4a2d-a178-905ca2f2edb2",
                            "name": "Create quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('response', () => {\n   it('returns an ID', () => {\n      const JSON_body = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n\n      const id = JSON_body.id\n      expect(id).not.to.be.empty\n      output('id', id)\n      console.info(`ID is ${id}`)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/",
                            "method": "POST",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "author": "{{author}}",
                                    "quote": "{{quote}}"
                                },
                                "formatted": "{\n    \"author\": \"{{author}}\",\n    \"quote\": \"{{quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "740c1e49-24b7-4c88-9e3a-9ad0a8fc1e79",
                            "name": "Get original quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('stored', () => {\n   const JSON_body = (response.body.type == BodyType.JSON)\n      ? response.body.data\n      : expect.fail('Response body is not JSON')\n\n   console.info(`Author: ${JSON_body.author}, Quote: \"${JSON_body.quote}\"`)\n\n   describe('author', () => {\n      it('equals configured author', () => {\n         expect(JSON_body.author).to.equal($.author)\n      })\n   })\n\n   describe('quote', () => {\n      it('equals original quote', () => {\n         expect(JSON_body.quote).to.equal($.quote)\n      })\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "54bc9d39-46ef-4c39-aa51-4d1868770864",
                            "name": "Update quote to test value",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "PUT",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "quote": "{{test-quote}}"
                                },
                                "formatted": "{\n  \"quote\": \"{{test-quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "ae846e26-6f0e-4b33-8313-0ba8cd5eba3b",
                            "name": "Get updated quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('quote', () => {\n   it('equals test quote', () => {\n      const result = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n      console.info(`Author: ${result.author}, Quote: \"${result.quote}\"`)\n      expect(result.quote).to.equal($['test-quote'])\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "ec50ac8e-ddd0-474a-ba6c-43baaabe5990",
                            "name": "Restore original quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "PUT",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "quote": "{{quote}}"
                                },
                                "formatted": "{\n  \"quote\": \"{{quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "00aed3da-45f9-46d5-91be-780dfdc4eb72",
                            "name": "Get restored quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('stored quote', () => {\n   it('equals original quote', () => {\n      const result = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n      console.info(`Author: ${result.author}, Quote: \"${result.quote}\"`)\n      expect(result.quote).to.equal($.quote)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "e3e0d5a3-fd8b-41fc-8aae-5d03bbac8a31",
                            "name": "Delete quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "DELETE",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "f90dbea5-5993-4f11-9943-d08416d28963",
                            "name": "Ensure quote is deleted",
                            "test": "describe('status', () => {\n   it('equals 404', () => {\n      expect(response.status).to.equal(404)\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        }
                    ],
                    "execution": "SEQUENTIAL",
                    "runs": 1,
                    "multiRunExecution": "CONCURRENT",
                    "selectedScenario": {
                        "id": "1faeaabc-b348-4cd5-a8ee-78c8b0c838d8",
                        "name": "Mark Twain Quotes"
                    }
                },
                {
                    "id": "951d3f21-e5cf-4426-90e9-0eaa3da83f11",
                    "name": "Author #2",
                    "children": [
                        {
                            "id": "52c97308-6781-405c-852f-241bcf6d5157",
                            "name": "Create quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('response', () => {\n   it('returns an ID', () => {\n      const JSON_body = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n\n      const id = JSON_body.id\n      expect(id).not.to.be.empty\n      output('id', id)\n      console.info(`ID is ${id}`)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/",
                            "method": "POST",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "author": "{{author}}",
                                    "quote": "{{quote}}"
                                },
                                "formatted": "{\n  \"author\": \"{{author}}\",\n  \"quote\": \"{{quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "4a054fbb-1b6e-4e05-bf11-d66b09e3663e",
                            "name": "Get original quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('stored', () => {\n   const JSON_body = (response.body.type == BodyType.JSON)\n      ? response.body.data\n      : expect.fail('Response body is not JSON')\n\n   console.info(`Author: ${JSON_body.author}, Quote: \"${JSON_body.quote}\"`)\n\n   describe('author', () => {\n      it('equals configured author', () => {\n         expect(JSON_body.author).to.equal($.author)\n      })\n   })\n\n   describe('quote', () => {\n      it('equals original quote', () => {\n         expect(JSON_body.quote).to.equal($.quote)\n      })\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "2188e9ac-89cf-48f2-9fca-ad57256f992e",
                            "name": "Update quote to test value",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "PUT",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "quote": "{{test-quote}}"
                                },
                                "formatted": "{\n  \"quote\": \"{{test-quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "04b83700-48c7-49b8-8a38-8e1dc73ae690",
                            "name": "Get updated quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('quote', () => {\n   it('equals test quote', () => {\n      const result = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n      console.info(`Author: ${result.author}, Quote: \"${result.quote}\"`)\n      expect(result.quote).to.equal($['test-quote'])\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "fc094caa-4f48-420d-b1bb-ddb322609cb1",
                            "name": "Restore original quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "PUT",
                            "timeout": 30000,
                            "headers": [
                                {
                                    "name": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "type": "JSON",
                                "data": {
                                    "quote": "{{quote}}"
                                },
                                "formatted": "{\n  \"quote\": \"{{quote}}\"\n}"
                            },
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "d72837be-0851-440b-99ce-d3e0abf22f3e",
                            "name": "Get restored quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n\ndescribe('stored quote', () => {\n   it('equals original quote', () => {\n      const result = (response.body.type == BodyType.JSON)\n         ? response.body.data\n         : expect.fail('Response body is not JSON')\n      console.info(`Author: ${result.author}, Quote: \"${result.quote}\"`)\n      expect(result.quote).to.equal($.quote)\n   })\n})",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "c450374a-4441-43f8-a9ca-e757a4bc652d",
                            "name": "Delete quote",
                            "test": "describe('status', () => {\n   it('equals 200', () => {\n      expect(response.status).to.equal(200)\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "DELETE",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        },
                        {
                            "id": "742330d2-9a61-422e-aa72-2d1d07dbbd6d",
                            "name": "Ensure quote is deleted",
                            "test": "describe('status', () => {\n   it('equals 404', () => {\n      expect(response.status).to.equal(404)\n   })\n})\n",
                            "url": "https://sample-api.apicize.com/quote/{{id}}",
                            "method": "GET",
                            "timeout": 30000,
                            "numberOfRedirects": 10,
                            "runs": 1,
                            "multiRunExecution": "SEQUENTIAL"
                        }
                    ],
                    "execution": "SEQUENTIAL",
                    "runs": 1,
                    "multiRunExecution": "SEQUENTIAL",
                    "selectedScenario": {
                        "id": "\tNONE\t",
                        "name": "(None)"
                    },
                    "selectedData": {
                        "id": "d5a031a1-4cda-4ffe-b78d-4f681d6507b3",
                        "name": "Unnamed"
                    }
                }
            ],
            "execution": "SEQUENTIAL",
            "runs": 1,
            "multiRunExecution": "SEQUENTIAL"
        },
        {
            "id": "f0e0565d-c59b-44f9-9232-426f89d46291",
            "name": "Image Rotation",
            "children": [
                {
                    "id": "14775e91-cee6-404e-bb64-88cc97b8b77a",
                    "name": "Right",
                    "test": "describe('status', () => {\n    it('equals 200', () => {\n        expect(response.status).to.equal(200)\n    })\n})\n\ndescribe('body', () => {\n    it('has length > 0', () => {\n        const result = (response.body.type == BodyType.Binary)\n            ? response.body.data\n            : expect.fail('Response body is not binary')\n\n        expect(result.length).to.be.greaterThan(0)\n    })\n})",
                    "url": "https://sample-api.apicize.com/image/right",
                    "method": "POST",
                    "timeout": 30000,
                    "headers": [
                        {
                            "name": "Content-Type",
                            "value": "image/jpeg"
                        }
                    ],
                    "body": {
                        "type": "Raw",
                        "data": ""
                    },
                    "numberOfRedirects": 10,
                    "runs": 1,
                    "multiRunExecution": "SEQUENTIAL"
                },
                {
                    "id": "d9664e4b-1ade-4588-aa92-a13244882d5a",
                    "name": "Flip",
                    "test": "describe('status', () => {\n    it('equals 200', () => {\n        expect(response.status).to.equal(200)\n    })\n})\n\ndescribe('body', () => {\n    it('has length > 0', () => {\n        const result = (response.body.type == BodyType.Binary)\n            ? response.body.data\n            : expect.fail('Response body is not binary')\n\n        expect(result.length).to.be.greaterThan(0)\n    })\n})",
                    "url": "https://sample-api.apicize.com/image/flip",
                    "method": "POST",
                    "timeout": 30000,
                    "headers": [
                        {
                            "name": "Content-Type",
                            "value": "image/jpeg"
                        }
                    ],
                    "body": {
                        "type": "Raw",
                        "data": ""
                    },
                    "numberOfRedirects": 10,
                    "runs": 1,
                    "multiRunExecution": "SEQUENTIAL"
                },
                {
                    "id": "08d81ab7-f1a7-4187-ab28-eb03199ef338",
                    "name": "Left",
                    "test": "describe('status', () => {\n    it('equals 200', () => {\n        expect(response.status).to.equal(200)\n    })\n})\n\ndescribe('body', () => {\n    it('has length > 0', () => {\n        const result = (response.body.type == BodyType.Binary)\n            ? response.body.data\n            : expect.fail('Response body is not binary')\n\n        expect(result.length).to.be.greaterThan(0)\n    })\n})",
                    "url": "https://sample-api.apicize.com/image/left",
                    "method": "POST",
                    "timeout": 30000,
                    "headers": [
                        {
                            "name": "Content-Type",
                            "value": "image/jpeg"
                        }
                    ],
                    "body": {
                        "type": "Raw",
                        "data": ""
                    },
                    "numberOfRedirects": 10,
                    "runs": 1,
                    "multiRunExecution": "SEQUENTIAL"
                }
            ],
            "execution": "CONCURRENT",
            "runs": 1,
            "multiRunExecution": "SEQUENTIAL"
        }
    ],
    "scenarios": [
        {
            "id": "1faeaabc-b348-4cd5-a8ee-78c8b0c838d8",
            "name": "Mark Twain Quotes",
            "variables": [
                {
                    "name": "author",
                    "value": "Samuel Clemmons"
                },
                {
                    "name": "quote",
                    "value": "Politicians and diapers must be changed often, and for the same reason"
                },
                {
                    "name": "test-quote",
                    "value": "Continuous improvement is better than delayed perfection"
                }
            ]
        },
        {
            "id": "57f8809e-1691-40c7-bf3a-a7c96ff241f6",
            "name": "Sun Tzu Quote",
            "variables": [
                {
                    "name": "author",
                    "value": "Sun Tzu"
                },
                {
                    "name": "quote",
                    "value": "夫兵久而国利者，未之有也"
                },
                {
                    "name": "test-quote",
                    "value": "There is no instance of a country having benefited from prolonged warfare"
                }
            ]
        },
        {
            "id": "6f8fb066-d243-47df-9641-c5d462a9cf89",
            "name": "George Carlin Quote",
            "variables": [
                {
                    "name": "author",
                    "value": "George Carlin"
                },
                {
                    "name": "quote",
                    "value": "Just when I discovered the meaning of life, they changed it."
                },
                {
                    "name": "test-quote",
                    "value": "We have multiplied our possessions but reduced our values."
                }
            ]
        }
    ],
    "authorizations": [
        {
            "type": "OAuth2Client",
            "id": "ccfbfacc-091c-4c97-908d-d5c6b0ddf13c",
            "name": "Sample Token",
            "accessTokenUrl": "https://sample-api.apicize.com/token",
            "clientId": "apicize",
            "clientSecret": "",
            "scope": "image quote calc",
            "selectedCertificate": {
                "id": "\tNONE\t",
                "name": "(None)"
            },
            "selectedProxy": {
                "id": "\tNONE\t",
                "name": "(None)"
            },
            "sendCredentialsInBody": false,
            "warnings": null
        }
    ],
    "data": [
        {
            "id": "d5a031a1-4cda-4ffe-b78d-4f681d6507b3",
            "name": "Sample JSON Data",
            "type": "FILE-JSON",
            "source": "./data/demo-test.json",
            "validation_errors": null
        },
        {
            "id": "78008fee-bbde-4ab6-ab77-650d44c5637a",
            "name": "Sample CSV Data",
            "type": "FILE-CSV",
            "source": "./data/demo-test.csv",
            "validation_errors": null
        }
    ],
    "defaults": {
        "selectedAuthorization": {
            "id": "ccfbfacc-091c-4c97-908d-d5c6b0ddf13c",
            "name": "Sample Token"
        }
    }
}